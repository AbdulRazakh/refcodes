package com.refcodes.portlets.businesscenter.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.refcodes.portlets.businesscenter.model.BusinessUser;
import com.refcodes.portlets.businesscenter.service.BusinessUserLocalService;
import com.refcodes.portlets.businesscenter.service.persistence.BusinessUserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the business user local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.refcodes.portlets.businesscenter.service.impl.BusinessUserLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.refcodes.portlets.businesscenter.service.impl.BusinessUserLocalServiceImpl
 * @see com.refcodes.portlets.businesscenter.service.BusinessUserLocalServiceUtil
 * @generated
 */
public abstract class BusinessUserLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements BusinessUserLocalService,
        IdentifiableBean {
    @BeanReference(type = com.refcodes.portlets.businesscenter.service.BusinessUserLocalService.class)
    protected com.refcodes.portlets.businesscenter.service.BusinessUserLocalService businessUserLocalService;
    @BeanReference(type = BusinessUserPersistence.class)
    protected BusinessUserPersistence businessUserPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private BusinessUserLocalServiceClpInvoker _clpInvoker = new BusinessUserLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.refcodes.portlets.businesscenter.service.BusinessUserLocalServiceUtil} to access the business user local service.
     */

    /**
     * Adds the business user to the database. Also notifies the appropriate model listeners.
     *
     * @param businessUser the business user
     * @return the business user that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public BusinessUser addBusinessUser(BusinessUser businessUser)
        throws SystemException {
        businessUser.setNew(true);

        return businessUserPersistence.update(businessUser);
    }

    /**
     * Creates a new business user with the primary key. Does not add the business user to the database.
     *
     * @param businessUserId the primary key for the new business user
     * @return the new business user
     */
    @Override
    public BusinessUser createBusinessUser(long businessUserId) {
        return businessUserPersistence.create(businessUserId);
    }

    /**
     * Deletes the business user with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param businessUserId the primary key of the business user
     * @return the business user that was removed
     * @throws PortalException if a business user with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public BusinessUser deleteBusinessUser(long businessUserId)
        throws PortalException, SystemException {
        return businessUserPersistence.remove(businessUserId);
    }

    /**
     * Deletes the business user from the database. Also notifies the appropriate model listeners.
     *
     * @param businessUser the business user
     * @return the business user that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public BusinessUser deleteBusinessUser(BusinessUser businessUser)
        throws SystemException {
        return businessUserPersistence.remove(businessUser);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(BusinessUser.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return businessUserPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.refcodes.portlets.businesscenter.model.impl.BusinessUserModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return businessUserPersistence.findWithDynamicQuery(dynamicQuery,
            start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.refcodes.portlets.businesscenter.model.impl.BusinessUserModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return businessUserPersistence.findWithDynamicQuery(dynamicQuery,
            start, end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return businessUserPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return businessUserPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public BusinessUser fetchBusinessUser(long businessUserId)
        throws SystemException {
        return businessUserPersistence.fetchByPrimaryKey(businessUserId);
    }

    /**
     * Returns the business user with the matching UUID and company.
     *
     * @param uuid the business user's UUID
     * @param  companyId the primary key of the company
     * @return the matching business user, or <code>null</code> if a matching business user could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public BusinessUser fetchBusinessUserByUuidAndCompanyId(String uuid,
        long companyId) throws SystemException {
        return businessUserPersistence.fetchByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the business user matching the UUID and group.
     *
     * @param uuid the business user's UUID
     * @param groupId the primary key of the group
     * @return the matching business user, or <code>null</code> if a matching business user could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public BusinessUser fetchBusinessUserByUuidAndGroupId(String uuid,
        long groupId) throws SystemException {
        return businessUserPersistence.fetchByUUID_G(uuid, groupId);
    }

    /**
     * Returns the business user with the primary key.
     *
     * @param businessUserId the primary key of the business user
     * @return the business user
     * @throws PortalException if a business user with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public BusinessUser getBusinessUser(long businessUserId)
        throws PortalException, SystemException {
        return businessUserPersistence.findByPrimaryKey(businessUserId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return businessUserPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns the business user with the matching UUID and company.
     *
     * @param uuid the business user's UUID
     * @param  companyId the primary key of the company
     * @return the matching business user
     * @throws PortalException if a matching business user could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public BusinessUser getBusinessUserByUuidAndCompanyId(String uuid,
        long companyId) throws PortalException, SystemException {
        return businessUserPersistence.findByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the business user matching the UUID and group.
     *
     * @param uuid the business user's UUID
     * @param groupId the primary key of the group
     * @return the matching business user
     * @throws PortalException if a matching business user could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public BusinessUser getBusinessUserByUuidAndGroupId(String uuid,
        long groupId) throws PortalException, SystemException {
        return businessUserPersistence.findByUUID_G(uuid, groupId);
    }

    /**
     * Returns a range of all the business users.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.refcodes.portlets.businesscenter.model.impl.BusinessUserModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of business users
     * @param end the upper bound of the range of business users (not inclusive)
     * @return the range of business users
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<BusinessUser> getBusinessUsers(int start, int end)
        throws SystemException {
        return businessUserPersistence.findAll(start, end);
    }

    /**
     * Returns the number of business users.
     *
     * @return the number of business users
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getBusinessUsersCount() throws SystemException {
        return businessUserPersistence.countAll();
    }

    /**
     * Updates the business user in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param businessUser the business user
     * @return the business user that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public BusinessUser updateBusinessUser(BusinessUser businessUser)
        throws SystemException {
        return businessUserPersistence.update(businessUser);
    }

    /**
     * Returns the business user local service.
     *
     * @return the business user local service
     */
    public com.refcodes.portlets.businesscenter.service.BusinessUserLocalService getBusinessUserLocalService() {
        return businessUserLocalService;
    }

    /**
     * Sets the business user local service.
     *
     * @param businessUserLocalService the business user local service
     */
    public void setBusinessUserLocalService(
        com.refcodes.portlets.businesscenter.service.BusinessUserLocalService businessUserLocalService) {
        this.businessUserLocalService = businessUserLocalService;
    }

    /**
     * Returns the business user persistence.
     *
     * @return the business user persistence
     */
    public BusinessUserPersistence getBusinessUserPersistence() {
        return businessUserPersistence;
    }

    /**
     * Sets the business user persistence.
     *
     * @param businessUserPersistence the business user persistence
     */
    public void setBusinessUserPersistence(
        BusinessUserPersistence businessUserPersistence) {
        this.businessUserPersistence = businessUserPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.refcodes.portlets.businesscenter.model.BusinessUser",
            businessUserLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.refcodes.portlets.businesscenter.model.BusinessUser");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return BusinessUser.class;
    }

    protected String getModelClassName() {
        return BusinessUser.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = businessUserPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
